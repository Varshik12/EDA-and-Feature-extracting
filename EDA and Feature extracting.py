# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10uNNTw2OpiqK488BHlIl4yoLA0eMjcVt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
df=pd.read_csv('/content/insurance.csv')
df

"""Exploratory Data Analysis"""

#shape
df.shape
df.head(10)
df.info()
df.describe()

df.columns

numeric_columns = ['age', 'bmi', 'children', 'charges']
for column in numeric_columns:
  plt.figure(figsize=(5,6))
  sns.histplot(df[column], kde=True)
  plt.title(f'Distribution of {column}')

sns.countplot(x='sex', data=df)
#plt.title('Distribution of Gender')
#sns.countplot(x='smoker', data=df)
#plt.title('Distribution of Smoker')
sns.countplot(y='region', data=df)
plt.title('Distribution of Region')

for col in numeric_columns:
  plt.figure(figsize=(4,5))
  sns.boxplot(x=df[col])

from re import T
# heatmap
plt.figure(figsize=(10,8))
sns.heatmap(df.corr(numeric_only=True), annot=True)

#deep cleaning and preprocessing
df_cleaned= df.copy()
df_cleaned.head(6)

df_cleaned.shape
df_cleaned.isnull().sum()

df_cleaned.drop_duplicates(inplace=True)
df_cleaned

df_cleaned.isnull().sum()
df_cleaned.dtypes

df_cleaned['sex'].value_counts()

df_cleaned['sex'] = df_cleaned['sex'].map({"male": 0, "female": 1})
df_cleaned.head(5)

df_cleaned['smoker'].value_counts()

df_cleaned['smoker'] = df_cleaned['smoker'].map({"no": 0, "yes": 1})
df_cleaned.head(5)

df_cleaned.rename(columns={
    'sex': 'is female',
    'smoker':'is smoker'
},
       inplace=True           )
df_cleaned.head(5)

df['region'].value_counts()
#df_cleaned['region_northeast'] = df_cleaned['region_northeast'].map({False: 0, True: 1})
#df_cleaned['region_northwest'] = df_cleaned['region_northwest'].map({False: 0, True: 1})
#df_cleaned['region_southeast'] = df_cleaned['region_southeast'].map({False: 0, True: 1})
#df_cleaned['region_southwest'] = df_cleaned['region_southwest'].map({False: 0, True: 1})

df_cleaned = pd.get_dummies(df_cleaned, columns=['region'])
df_cleaned

df_cleaned.head(5)

df_cleaned= df_cleaned.astype(int)
df_cleaned

# feature engineering and extraction
sns.histplot(df_cleaned['bmi'])

df_cleaned['bmi_category'] = pd.cut(
    df_cleaned['bmi'], bins=[0, 18.5, 24.9, 29.9, float('inf')],
    labels=['Underweight', 'Normal', 'Overweight', 'Obese']
)
df_cleaned.head(5)

df_cleaned = pd.get_dummies(df_cleaned,columns = ['bmi_category'],drop_first=True)
df_cleaned = df_cleaned.astype(int)
df_cleaned.head()

df_cleaned.columns

from sklearn.preprocessing import StandardScaler
cols = ['age','bmi','children']
scaler = StandardScaler()

df_cleaned[cols] = scaler.fit_transform(df_cleaned[cols])
df_cleaned.head()

from scipy.stats import pearsonr

# ----------------------------------
# Pearson Correlation Calculation
# ----------------------------------

# List of features to check against target
selected_features = [
    'age', 'bmi', 'children', 'is female', 'is smoker',
    'region_northwest', 'region_southeast', 'region_southwest',
    'bmi_category_Normal', 'bmi_category_Overweight', 'bmi_category_Obese'
]

correlations = {
    feature: pearsonr(df_cleaned[feature], df_cleaned['charges'])[0]
    for feature in selected_features
}
correlation_df = pd.DataFrame(list(correlations.items()), columns=['Feature', 'Pearson Correlation'])
correlation_df.sort_values(by='Pearson Correlation', ascending=False)

cat_features = [
    'is female', 'is smoker',
    'region_northwest', 'region_southeast', 'region_southwest',
    'bmi_category_Normal', 'bmi_category_Overweight', 'bmi_category_Obese'
]

from scipy.stats import chi2_contingency
import pandas as pd

alpha = 0.05

df_cleaned['charges_bin'] = pd.qcut(df_cleaned['charges'], q=4, labels=False)
chi2_results = {}

for col in cat_features:
    contingency = pd.crosstab(df_cleaned[col], df_cleaned['charges_bin'])
    chi2_stat, p_val, _, _ = chi2_contingency(contingency)
    decision = 'Reject Null (Keep Feature)' if p_val < alpha else 'Accept Null (Drop Feature)'
    chi2_results[col] = {
        'chi2_statistic': chi2_stat,
        'p_value': p_val,
        'Decision': decision
    }

chi2_df = pd.DataFrame(chi2_results).T
chi2_df = chi2_df.sort_values(by='p_value')
chi2_df

final_df = df_cleaned[['age', 'is female', 'bmi', 'children', 'is smoker', 'charges','region_southeast','bmi_category_Obese']]

final_df